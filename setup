#!/usr/bin/env python3
from os.path import islink, exists, dirname, join, realpath
from os import symlink
from shutil import move
from pathlib import Path
import tarfile
from urllib.request import urlretrieve


DOWNLOADS = [
    ("https://github.com/latex-lsp/texlab/releases/download/v3.3.1/texlab-x86_64-linux.tar.gz",
     tarfile.open, [("texlab", "~/bin/texlab")])
]

LINKS = {
    "spacemacs":"~/.spacemacs",
    "Xdefaults":"~/.Xdefaults",
    "zshrc":"~/.zshrc",
    "i3config":"~/.config/i3/config",
    "i3statusconfig":"~/.config/i3status/config",
    "latexmkrc":"~/.latexmkrc",
    "urxvt_ext":"~/.urxvt/ext",
    "screenlayout":"~/.screenlayout",
    "zshrc.d":"~/.zshrc.d",
    "arduino/mbed_nano.platform.txt":"~/.arduino15/packages/arduino/hardware/mbed_nano/2.5.2/platform.local.txt",
    "arduino/avr.platform.txt":"~/.arduino15/packages/arduino/hardware/avr/1.8.3/platform.local.txt",
}

DOTFILES_PATH = dirname(realpath(__file__))

for src, trg in LINKS.items():
    src = join(DOTFILES_PATH, src)
    trg = Path(trg).expanduser()
    if exists(trg) and not islink(trg):
        move(trg, f"{trg}.bak")
        print("target already exists and is not a symlink, creating backup")
    Path(dirname(trg)).mkdir(parents=True, exist_ok=True)
    if islink(trg):
        print(f"{trg} already linked")
    else:
        print(f"{src} -> {trg}")
        symlink(src, trg)

for url, opener, files in DOWNLOADS:
    print("downloading:", url)
    local_filename, headers = urlretrieve(url)
    with opener(local_filename) as zf:
        for member, trg in files:
            print(f"extracting: {member} -> {trg}")
            trg = Path(trg).expanduser()
            Path(dirname(trg)).mkdir(parents=True, exist_ok=True)
            zf.extract(member, trg)
